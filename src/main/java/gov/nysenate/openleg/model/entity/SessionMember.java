package gov.nysenate.openleg.model.entity;

import com.google.common.collect.ComparisonChain;
import gov.nysenate.openleg.model.base.SessionYear;
import gov.nysenate.openleg.processor.base.ParseError;

import java.io.Serializable;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SessionMember implements Comparable<SessionMember>, Serializable
{
    private static final long serialVersionUID = -8348372884270872363L;

    private static final Pattern shortNamePattern = Pattern.compile("([A-Z-_']+)( ([A-Z]+))?");

    /** Unique session member id generated by the persistence layer. Maps to a lbdcShortName.
     * A member may have multiple sessionMemberIds in a single session for different representations of their shortname */
    protected int sessionMemberId;

    /** Member that this SessionMember matches up to. */
    protected Member member;

    /** Current mapping to LBDC's representation of the member id.
     *  This shortName is only unique to the scope of a (2 year) session */
    protected String lbdcShortName;

    /** The session year the member is active in. */
    protected SessionYear sessionYear;

    /** The district number the member is serving in during the given session year. */
    protected Integer districtCode;

    /** True if the shortname on this member is an alternate shortname */
    protected boolean alternate;

    /** --- Constructors --- */

    public SessionMember() {}

    public SessionMember(int memberId, SessionYear sessionYear) {
        this.member = new Member(memberId);
        this.sessionYear = sessionYear;
    }

    public SessionMember(int sessionMemberId, Member member, String lbdcShortName, SessionYear sessionYear, Integer districtCode, boolean alternate) {
        this.sessionMemberId = sessionMemberId;
        this.member = member;
        this.lbdcShortName = lbdcShortName;
        this.sessionYear = sessionYear;
        this.districtCode = districtCode;
        this.alternate = alternate;
    }

    public SessionMember(SessionMember other) {
        this.member = other.member;
        this.sessionMemberId = other.sessionMemberId;
        this.lbdcShortName = other.lbdcShortName;
        this.sessionYear = other.sessionYear;
        this.districtCode = other.districtCode;
        this.alternate = other.alternate;
    }

    /**
     * Constructs an incomplete member based on a limited amount of information
     *
     * @param lbdcShortName String - The short name of the member as represented in the source data.
     * @param sessionYear SessionYear - The session year in which this member was active.
     * @param chamber Chamber
     * @throws ParseError if the given shortname cannot be parsed
     * @return Member
     */
    public static SessionMember newMakeshiftMember(String lbdcShortName, SessionYear sessionYear, Chamber chamber) throws ParseError {
        if (lbdcShortName == null)
            throw new ParseError("Attempted to create makeshift member, but lbdcShortName was null!");
        // Assembly members are not already uppercase
        lbdcShortName = lbdcShortName.toUpperCase().trim();
        SessionMember sessionMember = new SessionMember();
        sessionMember.setLbdcShortName(lbdcShortName);
        sessionMember.setSessionYear(sessionYear);

        Member member = new Member();
        member.setChamber(chamber);
        member.setIncumbent(sessionYear.equals(SessionYear.current()));

        Matcher shortNameMatcher = shortNamePattern.matcher(lbdcShortName);
        if (shortNameMatcher.matches()) {
            member.setLastName(shortNameMatcher.group(1));
            if (shortNameMatcher.groupCount() == 3) {
                member.setFirstName(shortNameMatcher.group(3));
                member.setFullName((member.getFirstName() != null ? member.getFirstName() +  " " : "") + member.getLastName());
            }
            else
                member.setFullName(member.getLastName());
        }
        else
            throw new ParseError("Can not create makeshift member: LBDC shortname '" + lbdcShortName + "' does not match specification");
        sessionMember.member = member;
        return sessionMember;
    }

    /**
     * Updates a session member with the fields of other.
     */
    public void updateFromOther(SessionMember other) {
        this.member = new Member();
        this.member.updateFromOther(other.member);
        this.sessionMemberId = other.getSessionMemberId();
        this.lbdcShortName = other.getLbdcShortName();
        this.alternate = other.isAlternate();
        this.sessionYear = other.getSessionYear();
        this.districtCode = other.getDistrictCode();
    }

    public boolean exactEquals(SessionMember sessionMember) {
        return this.equals(sessionMember) &&
                Objects.equals(this.sessionMemberId, sessionMember.sessionMemberId) &&
                Objects.equals(this.lbdcShortName, sessionMember.lbdcShortName) &&
                Objects.equals(this.alternate, sessionMember.alternate);
    }

    /** --- Overrides --- */

    /**
     * Ignores LBDC Shortname since there can be multiple variations.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        final SessionMember other = (SessionMember) obj;
        return Objects.equals(this.sessionYear, other.sessionYear) &&
               Objects.equals(this.districtCode, other.districtCode) &&
               Objects.equals(this.member, other.member);
    }

    @Override
    public int hashCode() {
        return Objects.hash(member, sessionYear, districtCode);
    }

    @Override
    public String toString() {
        return lbdcShortName + " (year: " + sessionYear + ", id: " + member.memberId + ")";
    }

    @Override
    public int compareTo(SessionMember o) {
        return ComparisonChain.start()
                .compare(this.member, o.member)
                .compare(this.sessionYear, o.sessionYear)
                .compareTrueFirst(this.alternate, o.alternate)
                .compare(this.lbdcShortName, o.lbdcShortName)
                .result();
    }

    /** --- Basic Getters/Setters --- */

    public int getSessionMemberId() {
        return sessionMemberId;
    }

    public void setSessionMemberId(int sessionMemberId) {
        this.sessionMemberId = sessionMemberId;
    }

    public Member getMember() {
        return member;
    }

    public void setMember(Member member) {
        this.member = member;
    }

    public String getLbdcShortName() {
        return lbdcShortName;
    }

    public void setLbdcShortName(String lbdcShortName) {
        this.lbdcShortName = lbdcShortName;
    }

    public SessionYear getSessionYear() {
        return sessionYear;
    }

    public void setSessionYear(SessionYear sessionYear) {
        this.sessionYear = sessionYear;
    }

    public Integer getDistrictCode() {
        return districtCode;
    }

    public void setDistrictCode(Integer districtCode) {
        this.districtCode = districtCode;
    }

    public boolean isAlternate() {
        return alternate;
    }

    public void setAlternate(boolean alternate) {
        this.alternate = alternate;
    }
}
